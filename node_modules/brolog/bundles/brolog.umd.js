/* Brolog version 1.8.3 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (factory((global.window = global.window || {})));
}(this, (function (exports) {
    'use strict';
    /**
     * VERSION
     */
    var pkg;
    exports.VERSION = '0.0.0';
    try {
        pkg = require('../package.json');
        if (pkg) {
            exports.VERSION = pkg.version;
        }
    }
    catch (e) {
        exports.VERSION = '0.0.0';
    }
    /**
     * BROLOG_LEVEL
     */
    var DEFAULT_LEVEL = 'info';
    var BROLOG_LEVEL_VAR_NAME = 'BROLOG_LEVEL';
    var BROLOG_PREFIX_VAR_NAME = 'BROLOG_PREFIX';
    var level;
    var debugModule;
    /**
     * Sometimes there's a `process` in browser (ionic3 & angular5)
     * Sometimes there's a window in Node.js (browserify)
     */
    if (typeof process !== 'undefined' && process.env) {
        /**
         * Node.js
         */
        if (!level) {
            level = process.env[BROLOG_LEVEL_VAR_NAME];
        }
        if (!debugModule) {
            debugModule = process.env[BROLOG_PREFIX_VAR_NAME];
        }
    }
    if (typeof window !== 'undefined' && window.location && typeof window.location.search === 'string') {
        /**
         * Browser
         */
        if (!level) {
            level = getJsonFromUrl()[BROLOG_LEVEL_VAR_NAME];
        }
        if (!debugModule) {
            debugModule = getJsonFromUrl()[BROLOG_LEVEL_VAR_NAME];
        }
        function getJsonFromUrl() {
            // https://stackoverflow.com/questions/8486099/how-do-i-parse-a-url-query-parameters-in-javascript
            var query = location.search.substr(1);
            var result = {};
            query.split('&').forEach(function (part) {
                var item = part.split('=');
                result[item[0]] = decodeURIComponent(item[1]);
            });
            return result;
        }
    }
    var BROLOG_LEVEL = level || DEFAULT_LEVEL;
    var BROLOG_PREFIX = debugModule || '*';
    /*!
     * Brolog JavaScript Library v1.1.0
     * https://github.com/huan/brolog
     *
     * Copyright Huan LI <zixia@zixia.net>
     * Released under the ISC license
     * https://github.com/huan/brolog/blob/master/LICENSE
     *
     * Date: 2016-07
     */
    (function (LogLevel) {
        LogLevel[LogLevel["silent"] = 0] = "silent";
        LogLevel[LogLevel["error"] = 1] = "error";
        LogLevel[LogLevel["warn"] = 2] = "warn";
        LogLevel[LogLevel["info"] = 3] = "info";
        LogLevel[LogLevel["verbose"] = 4] = "verbose";
        LogLevel[LogLevel["silly"] = 5] = "silly";
    })(exports.LogLevel || (exports.LogLevel = {}));
    var Brolog = /** @class */ (function () {
        function Brolog() {
            this.enableTimestamp = true;
            this.level(Brolog.globalLogLevelName);
            this.logLevel = exports.LogLevel[this.level()];
            this.prefix(Brolog.globalPrefix);
            this.prefixFilter = this.prefix();
            this.textPrinter = this.defaultTextPrinter;
        }
        /**
         * Create a global Brolog Instance for sharing between modules
         */
        Brolog.instance = function (levelName, prefix) {
            if (!this.globalInstance) {
                this.globalInstance = new Brolog();
            }
            if (levelName) {
                this.globalLogLevelName = levelName;
                this.globalInstance.level(levelName);
            }
            if (prefix) {
                this.globalPrefix = prefix;
                this.globalInstance.prefix(prefix);
            }
            return this.globalInstance;
        };
        Brolog.version = function () {
            return exports.VERSION;
        };
        Brolog.prototype.version = function () {
            return Brolog.version();
        };
        Brolog.enableLogging = function (printerFunc) {
            return Brolog.instance().enableLogging(printerFunc);
        };
        Brolog.prototype.enableLogging = function (printerFunc) {
            this.verbose('Brolog', 'enableLogging(%s)', printerFunc);
            // const loggerMethodList = [
            //   'error',
            //   'warn',
            //   'info',
            //   'verbose',
            //   'silly',
            // ]
            if (printerFunc === false) {
                this.silly('Brolog', 'enableLogging() disabled');
                // loggerMethodList.forEach(m => {
                //   this[m] =  nullLogger[m]
                // })
                this.textPrinter = function () { };
            }
            else if (printerFunc === true) {
                this.silly('Brolog', 'enableLogging() enabled: restore Brolog instance');
                // const restore = new Brolog()
                // loggerMethodList.forEach(m => {
                //   this[m] = restore[m]
                // })
                this.textPrinter = this.defaultTextPrinter;
                // } else if (typeof log.verbose === 'function') {
                //   this.silly('Brolog', 'enableLogging() enabled: using provided logger')
                //   for (const method of loggerMethodList) {
                //     this[method] = () => {
                //       // In order to compatible with winston,
                //       // we need to change the args from
                //       // brolog.info('Main', 'Hello %s', 'world')
                //       // to
                //       // log.info('Main Hello %s', 'world')
                //       const argList: string[] = Array.from(arguments)
                //       if (argList.length > 1) {
                //         const module = argList.shift()
                //         argList[0] = `${module} ` + argList[0]
                //       }
                //       return Reflect.apply(log[method], log, argList)
                //     }
                //   }
            }
            else if (typeof printerFunc === 'function') {
                this.silly('Brolog', 'enableLogging() enabled: using provided log function');
                this.textPrinter = function (levelTitle, text) {
                    printerFunc(levelTitle, text);
                    return;
                };
            }
            else {
                throw new Error('got invalid logger');
            }
            return this;
        };
        Brolog.prefix = function (filter) {
            if (filter) {
                this.globalPrefix = filter;
                this.globalInstance.prefix(filter);
            }
            else {
                return this.instance().prefix();
            }
        };
        Brolog.prototype.prefix = function (filter) {
            if (filter) {
                if (typeof filter === 'string') {
                    this.prefixFilter = new RegExp('^' + filter + '$');
                }
                else if (filter instanceof RegExp) {
                    this.prefixFilter = filter;
                }
                else {
                    throw new Error('unsupported prefix filter');
                }
            }
            else {
                return this.prefixFilter;
            }
        };
        Brolog.level = function (levelName) {
            if (levelName) {
                this.globalLogLevelName = levelName;
            }
            return this.instance().level(levelName);
        };
        Brolog.prototype.level = function (levelName) {
            if (levelName) {
                // console.log('levelName: ' + levelName)
                // http://stackoverflow.com/a/21294925/1123955
                // XXX: fix the any here?
                var logLevel = exports.LogLevel[levelName.toLowerCase()];
                if (logLevel === undefined) { // be aware of number 0 here
                    exports.log.error('Brolog', 'level(%s) not exist, set to silly.', levelName);
                    logLevel = exports.LogLevel.silly;
                }
                this.logLevel = logLevel;
            }
            return exports.LogLevel[this.logLevel];
        };
        Brolog.prototype.log = function (levelTitle, prefix, message) {
            if (this.prefixFilter && !this.prefixFilter.test(prefix)) {
                return; // skip message not match prefix filter
            }
            var args = Array.prototype.slice.call(arguments, 3) || [];
            args.unshift(this.timestamp() + levelTitle + ' ' + prefix + ' ' + (message || ''));
            // const args = Array.from(arguments) || []
            // args[0] = this.timestamp() + args[0]
            var text = Reflect.apply(sprintf, null, args);
            this.textPrinter(levelTitle, text);
        };
        Brolog.prototype.defaultTextPrinter = function (levelTitle, text) {
            // Use Reflect at:
            // https://www.keithcirkel.co.uk/metaprogramming-in-es6-part-2-reflect/
            switch (levelTitle) {
                case 'ERR':
                    // console.error.apply(console, args)
                    // Reflect.apply(console.error, console, args)
                    console.error(text);
                    break;
                case 'WARN':
                    // console.warn.apply(console, args)
                    // Reflect.apply(console.warn, console, args)
                    console.warn(text);
                    break;
                case 'INFO':
                    // console.info.apply(console, args)
                    // Reflect.apply(console.info, console, args)
                    console.info(text);
                    break;
                default:
                case 'VERB':
                case 'SILL':
                    // console.log.apply(console, args)
                    // Reflect.apply(console.log, console, args)
                    console.log(text);
            }
        };
        Brolog.error = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            // return instance.error.apply(instance, arguments)
            return Reflect.apply(instance.error, instance, [].concat(prefix, args));
        };
        Brolog.prototype.error = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < exports.LogLevel.error) {
                return;
            }
            var argList = Array.from([prefix].concat(args));
            argList.unshift('ERR');
            return Reflect.apply(this.log, this, argList);
        };
        Brolog.warn = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return Reflect.apply(instance.warn, instance, [].concat(prefix, args));
        };
        Brolog.prototype.warn = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < exports.LogLevel.warn) {
                return;
            }
            var argList = Array.from([prefix].concat(args));
            argList.unshift('WARN');
            return Reflect.apply(this.log, this, argList);
        };
        Brolog.info = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return Reflect.apply(instance.info, instance, [].concat(prefix, args));
        };
        Brolog.prototype.info = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < exports.LogLevel.info) {
                return;
            }
            var argList = Array.from([prefix].concat(args));
            argList.unshift('INFO');
            return Reflect.apply(this.log, this, argList);
        };
        Brolog.verbose = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return Reflect.apply(instance.verbose, instance, [].concat(prefix, args));
        };
        Brolog.prototype.verbose = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < exports.LogLevel.verbose) {
                return;
            }
            var argList = Array.from([prefix].concat(args));
            argList.unshift('VERB');
            return Reflect.apply(this.log, this, argList);
        };
        Brolog.silly = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var instance = Brolog.instance();
            return Reflect.apply(instance.silly, instance, [].concat(prefix, args));
        };
        Brolog.prototype.silly = function (prefix) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.logLevel < exports.LogLevel.silly) {
                return;
            }
            var argList = Array.from([prefix].concat(args));
            argList.unshift('SILL');
            return Reflect.apply(this.log, this, argList);
        };
        Brolog.prototype.timestamp = function (enable) {
            if (typeof enable === 'boolean') {
                this.enableTimestamp = enable;
                return;
            }
            if (!this.enableTimestamp) {
                return '';
            }
            var date = new Date();
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();
            var stampStr = '';
            stampStr += (hour < 10) ? ('0' + hour) : hour;
            stampStr += ':';
            stampStr += (min < 10) ? ('0' + min) : min;
            stampStr += ':';
            stampStr += (sec < 10) ? ('0' + sec) : sec;
            return stampStr + ' ';
        };
        return Brolog;
    }());
    Brolog.globalLogLevelName = 'info';
    Brolog.globalPrefix = /.*/; // Match all by default
    // Credit: https://stackoverflow.com/a/4795914/1123955
    function sprintf() {
        var args = arguments;
        var text = args[0];
        var i = 1;
        return text.replace(/%((%)|s|d)/g, function (m) {
            // m is the matched format, e.g. %s, %d
            var val = null;
            if (m[2]) {
                val = m[2];
            }
            else {
                val = args[i];
                // A switch statement so that the formatter can be extended. Default is %s
                switch (m) {
                    case '%d':
                        val = parseFloat(val);
                        if (isNaN(val)) {
                            val = 0;
                        }
                        break;
                }
                i++;
            }
            return val;
        });
    }
    exports.log = Brolog.instance();
    if (BROLOG_LEVEL) {
        /**
         * set logLevel from:
         * 1. process.env['BROLOG_LEVEL'], or
         * 2. in URL: `?BROLOG_LEVEL=verbose&...`
         */
        if (BROLOG_LEVEL === '*') {
            exports.log.level('silly');
        }
        else {
            exports.log.level(BROLOG_LEVEL);
        }
    }
    if (BROLOG_PREFIX && BROLOG_PREFIX !== '*') {
        exports.log.prefix(BROLOG_PREFIX);
    }
    exports.Brolog = Brolog;
    exports.default = Brolog;
    Object.defineProperty(exports, '__esModule', { value: true });
})));
/* https://github.com/huan */
//# sourceMappingURL=brolog.es6.umd.js.map
