var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* state-switch version 0.6.18 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('nop')) :
        typeof define === 'function' && define.amd ? define(['exports', 'nop'], factory) :
            (global = global || self, factory(global.window = {}, global.NOP));
}(this, function (exports, NOP) {
    'use strict';
    NOP = NOP && NOP.hasOwnProperty('default') ? NOP['default'] : NOP;
    /**
     * This file was auto generated from scripts/generate-version.sh
     */
    var VERSION = '0.6.18';
    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var StateSwitch = /** @class */ (function () {
        function StateSwitch(_name, logInstance) {
            var _this = this;
            if (_name === void 0) { _name = 'Lock'; }
            this._name = _name;
            if (logInstance) {
                this.setLog(logInstance); // init log, should be a Brolog or Npmlog instance
            }
            else {
                this.setLog(null);
            }
            this.log.verbose('StateSwitch', 'constructor(name=%s)', _name);
            this._on = false;
            this._pending = false;
            /**
             * for ready()
             */
            this.offPromise = Promise.resolve();
            this.onPromise = new Promise(function (resolve) {
                _this.onResolver = resolve;
            });
            this.offResolver = NOP;
        }
        StateSwitch.prototype.version = function () {
            return VERSION;
        };
        StateSwitch.prototype.setLog = function (logInstance) {
            if (logInstance) {
                this.log = logInstance;
            }
            else {
                /* eslint @typescript-eslint/no-unused-vars: off */
                this.log = {
                    silly: function () {
                        var _ = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            _[_i] = arguments[_i];
                        }
                    },
                    verbose: function () {
                        var _ = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            _[_i] = arguments[_i];
                        }
                    },
                    warn: function () {
                        var _ = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            _[_i] = arguments[_i];
                        }
                    },
                    error: function () {
                        var _ = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            _[_i] = arguments[_i];
                        }
                    },
                };
            }
        };
        /**
         * set/get ON state
         */
        StateSwitch.prototype.on = function (state) {
            var _this = this;
            if (state) {
                this.log.verbose('StateSwitch', '<%s> on(%s) <- (%s)', this._name, state, this.on());
                this._on = true;
                this._pending = (state === 'pending');
                /**
                 * for ready()
                 */
                if (this.offResolver === NOP) {
                    this.offPromise = new Promise(function (resolve) { return (_this.offResolver = resolve); });
                }
                if (state === true && this.onResolver !== NOP) {
                    this.onResolver();
                    this.onResolver = NOP;
                }
                return;
            }
            var on = this._on
                ? this._pending ? 'pending' : true
                : false;
            this.log.silly('StateSwitch', '<%s> on() is %s', this._name, on);
            return on;
        };
        /**
         * set/get OFF state
         */
        StateSwitch.prototype.off = function (state) {
            var _this = this;
            if (state) {
                this.log.verbose('StateSwitch', '<%s> off(%s) <- (%s)', this._name, state, this.off());
                this._on = false;
                this._pending = (state === 'pending');
                /**
                 * for ready()
                 */
                if (this.onResolver === NOP) {
                    this.onPromise = new Promise(function (resolve) { return (_this.onResolver = resolve); });
                }
                if (state === true && this.offResolver !== NOP) {
                    this.offResolver();
                    this.offResolver = NOP;
                }
                return;
            }
            var off = !this._on
                ? this._pending ? 'pending' : true
                : false;
            this.log.silly('StateSwitch', '<%s> off() is %s', this._name, off);
            return off;
        };
        StateSwitch.prototype.ready = function (state, noCross) {
            if (state === void 0) { state = 'on'; }
            if (noCross === void 0) { noCross = false; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.log.verbose('StateSwitch', '<%s> ready(%s, %s)', this._name, state, noCross);
                            if (!(state === 'on')) return [3 /*break*/, 2];
                            if (this._on === false && noCross === true) {
                                throw new Error("ready(on) but the state is off. call ready(on, true) to force crossWait");
                            }
                            return [4 /*yield*/, this.onPromise];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            if (this._on === true && noCross === true) {
                                throw new Error('ready(off) but the state is on. call ready(off, true) to force crossWait');
                            }
                            return [4 /*yield*/, this.offPromise];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            this.log.silly('StateSwitch', '<%s> ready(%s, %s) resolved.', this._name, state, noCross);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * does the state is not stable(in process)?
         */
        StateSwitch.prototype.pending = function () {
            this.log.silly('StateSwitch', '<%s> pending() is %s', this._name, this._pending);
            return this._pending;
        };
        /**
         * get the client name
         */
        StateSwitch.prototype.name = function () {
            return this._name;
        };
        return StateSwitch;
    }());
    exports.StateSwitch = StateSwitch;
    exports.VERSION = VERSION;
    exports.default = StateSwitch;
    Object.defineProperty(exports, '__esModule', { value: true });
}));
/* https://github.com/huan */
//# sourceMappingURL=state-switch.es6.umd.js.map
