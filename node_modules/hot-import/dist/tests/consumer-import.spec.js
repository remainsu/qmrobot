#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
// tslint:disable:no-shadowed-variable
const test = require("blue-tape");
// import { log } from 'brolog'
// log.level('silly')
const hot_import_1 = require("../src/hot-import");
const __1 = require("../");
const MODULE_RELATIVE_PATH = './fixtures/meaning-of-life';
test('hotImport', (t) => __awaiter(this, void 0, void 0, function* () {
    const hotMod = yield __1.default(MODULE_RELATIVE_PATH);
    const mol = new hotMod.MeaningOfLife();
    t.equal(mol.answer, 42, 'should get 42 for meaning of life');
    yield __1.default(MODULE_RELATIVE_PATH, false);
}));
test('callerResolve', (t) => __awaiter(this, void 0, void 0, function* () {
    const EXPECTED_ABS_PATH = path.resolve(__dirname, MODULE_RELATIVE_PATH);
    const absFilePath = hot_import_1.callerResolve(MODULE_RELATIVE_PATH);
    t.equal(absFilePath, EXPECTED_ABS_PATH, 'should resolve based on the consumer file path');
}));
//# sourceMappingURL=consumer-import.spec.js.map