"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const wechaty_puppet_1 = require("wechaty-puppet");
const src_1 = require("../src/");
/**
 *
 * 1. Declare your Bot!
 *
 */
const puppet = new src_1.PuppetHostie();
/**
 *
 * 2. Register event handlers for Bot
 *
 */
puppet
    .on('logout', onLogout)
    .on('login', onLogin)
    .on('scan', onScan)
    .on('error', onError)
    .on('message', onMessage);
/**
 *
 * 3. Start the bot!
 *
 */
puppet.start()
    .catch((e) => __awaiter(void 0, void 0, void 0, function* () {
    console.error('Bot start() fail:', e);
    yield puppet.stop();
    process.exit(-1);
}));
/**
 *
 * 4. You are all set. ;-]
 *
 */
/**
 *
 * 5. Define Event Handler Functions for:
 *  `scan`, `login`, `logout`, `error`, and `message`
 *
 */
function onScan(payload) {
    if (payload.qrcode) {
        // Generate a QR Code online via
        // http://goqr.me/api/doc/create-qr-code/
        const qrcodeImageUrl = [
            'https://api.qrserver.com/v1/create-qr-code/?data=',
            encodeURIComponent(payload.qrcode),
        ].join('');
        console.info(`[${payload.status}] ${qrcodeImageUrl}\nScan QR Code above to log in: `);
    }
    else {
        console.info(`[${payload.status}] `, wechaty_puppet_1.ScanStatus[payload.status]);
    }
}
function onLogin(payload) {
    return __awaiter(this, void 0, void 0, function* () {
        console.info(`${payload.contactId} login`);
        const contactPayload = yield puppet.contactPayload(payload.contactId);
        console.info(`contact payload: ${JSON.stringify(contactPayload)}`);
        puppet.messageSendText(payload.contactId, 'Wechaty login').catch(console.error);
    });
}
function onLogout(payload) {
    console.info(`${payload.contactId} logouted`);
}
function onError(payload) {
    console.error('Bot error:', payload.data);
    /*
    if (bot.logonoff()) {
        bot.say('Wechaty error: ' + e.message).catch(console.error)
    }
    */
}
/**
 *
 * 6. The most important handler is for:
 *    dealing with Messages.
 *
 */
function onMessage(payload) {
    return __awaiter(this, void 0, void 0, function* () {
        console.info(`onMessage(${payload.messageId})`);
        // const DEBUG: boolean = true
        // if (DEBUG) {
        //   return
        // }
        const messagePayload = yield puppet.messagePayload(payload.messageId);
        console.info('messagePayload:', JSON.stringify(messagePayload));
        if (messagePayload.fromId) {
            const contactPayload = yield puppet.contactPayload(messagePayload.fromId);
            console.info(`contactPayload(fromId:${messagePayload.fromId}):`, JSON.stringify(contactPayload));
        }
        if (messagePayload.roomId) {
            const roomPayload = yield puppet.roomPayload(messagePayload.roomId);
            console.info('roomPayload:', JSON.stringify(roomPayload));
        }
        if (messagePayload.toId) {
            const contactPayload = yield puppet.contactPayload(messagePayload.toId);
            console.info(`contactPayload(toId:${messagePayload.toId}):`, JSON.stringify(contactPayload));
        }
        if (messagePayload.fromId === puppet.selfId()) {
            console.info('skip self message');
            return;
        }
        if (messagePayload.type === wechaty_puppet_1.MessageType.Text
            && /^ding$/i.test(messagePayload.text || '')) {
            let conversationId = messagePayload.roomId || messagePayload.fromId;
            if (!conversationId) {
                throw new Error('no conversation id');
            }
            yield puppet.messageSendText(conversationId, 'dong');
            const fileBox = wechaty_puppet_1.FileBox.fromUrl('https://wechaty.github.io/wechaty/images/bot-qr-code.png');
            yield puppet.messageSendFile(conversationId, fileBox);
        }
    });
}
/**
 *
 * 7. Output the Welcome Message
 *
 */
const welcome = `
Puppet Version: ${puppet}@${puppet.version()}

Please wait... I'm trying to login in...

`;
console.info(welcome);
// async function loop () {
//   while (true) {
//     await new Promise(resolve => setTimeout(resolve, 1000))
//   }
// }
// loop()
//# sourceMappingURL=ding-dong-bot.js.map