import { ContactPayload, FileBox, FriendshipPayload, MessagePayload, Puppet, PuppetOptions, RoomInvitationPayload, RoomMemberPayload, RoomPayload, UrlLinkPayload, MiniProgramPayload, ImageType } from 'wechaty-puppet';
export declare class PuppetHostie extends Puppet {
    options: PuppetOptions;
    static readonly VERSION: string;
    private grpcClient?;
    private eventStream?;
    /**
     * Store the clean callback when we starting, e.g.:
     *  this.off('event', cb)
     *  sub.unsubscribe()
     *  etc...
     */
    private cleanCallbackList;
    constructor(options?: PuppetOptions);
    private discoverHostieIp;
    protected startGrpcClient(): Promise<void>;
    protected stopGrpcClient(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    private startGrpcStream;
    private onGrpcStreamEvent;
    private stopGrpcStream;
    logout(): Promise<void>;
    ding(data: string): void;
    unref(): void;
    /**
     *
     * Contact
     *
     */
    contactAlias(contactId: string): Promise<string>;
    contactAlias(contactId: string, alias: string | null): Promise<void>;
    contactList(): Promise<string[]>;
    contactQRCode(contactId: string): Promise<string>;
    contactAvatar(contactId: string): Promise<FileBox>;
    contactAvatar(contactId: string, file: FileBox): Promise<void>;
    contactRawPayload(id: string): Promise<ContactPayload>;
    contactRawPayloadParser(payload: ContactPayload): Promise<ContactPayload>;
    contactSelfName(name: string): Promise<void>;
    contactSelfQRCode(): Promise<string>;
    contactSelfSignature(signature: string): Promise<void>;
    /**
     *
     * Message
     *
     */
    messageMiniProgram(messageId: string): Promise<MiniProgramPayload>;
    messageImage(messageId: string, imageType: ImageType): Promise<FileBox>;
    messageContact(messageId: string): Promise<string>;
    messageSendMiniProgram(conversationId: string, miniProgramPayload: MiniProgramPayload): Promise<void | string>;
    messageRecall(messageId: string): Promise<boolean>;
    messageFile(id: string): Promise<FileBox>;
    messageRawPayload(id: string): Promise<MessagePayload>;
    messageRawPayloadParser(payload: MessagePayload): Promise<MessagePayload>;
    messageSendText(conversationId: string, text: string): Promise<void | string>;
    messageSendFile(conversationId: string, file: FileBox): Promise<void | string>;
    messageSendContact(conversationId: string, contactId: string): Promise<void | string>;
    messageSendUrl(conversationId: string, urlLinkPayload: UrlLinkPayload): Promise<void | string>;
    messageUrl(messageId: string): Promise<UrlLinkPayload>;
    /**
     *
     * Room
     *
     */
    roomRawPayload(id: string): Promise<RoomPayload>;
    roomRawPayloadParser(payload: RoomPayload): Promise<RoomPayload>;
    roomList(): Promise<string[]>;
    roomDel(roomId: string, contactId: string): Promise<void>;
    roomAvatar(roomId: string): Promise<FileBox>;
    roomAdd(roomId: string, contactId: string): Promise<void>;
    roomTopic(roomId: string): Promise<string>;
    roomTopic(roomId: string, topic: string): Promise<void>;
    roomCreate(contactIdList: string[], topic: string): Promise<string>;
    roomQuit(roomId: string): Promise<void>;
    roomQRCode(roomId: string): Promise<string>;
    roomMemberList(roomId: string): Promise<string[]>;
    roomMemberRawPayload(roomId: string, contactId: string): Promise<any>;
    roomMemberRawPayloadParser(payload: any): Promise<RoomMemberPayload>;
    roomAnnounce(roomId: string): Promise<string>;
    roomAnnounce(roomId: string, text: string): Promise<void>;
    roomInvitationAccept(roomInvitationId: string): Promise<void>;
    roomInvitationRawPayload(id: string): Promise<RoomInvitationPayload>;
    roomInvitationRawPayloadParser(payload: RoomInvitationPayload): Promise<RoomInvitationPayload>;
    /**
     *
     * Friendship
     *
     */
    friendshipSearchPhone(phone: string): Promise<string | null>;
    friendshipSearchWeixin(weixin: string): Promise<string | null>;
    friendshipRawPayload(id: string): Promise<FriendshipPayload>;
    friendshipRawPayloadParser(payload: FriendshipPayload): Promise<FriendshipPayload>;
    friendshipAdd(contactId: string, hello: string): Promise<void>;
    friendshipAccept(friendshipId: string): Promise<void>;
    /**
     *
     * Tag
     *
     */
    tagContactAdd(id: string, contactId: string): Promise<void>;
    tagContactRemove(id: string, contactId: string): Promise<void>;
    tagContactDelete(id: string): Promise<void>;
    tagContactList(contactId?: string): Promise<string[]>;
}
export default PuppetHostie;
//# sourceMappingURL=puppet-hostie.d.ts.map