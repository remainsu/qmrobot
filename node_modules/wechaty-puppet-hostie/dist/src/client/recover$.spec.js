#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
// import {
//   TestScheduler,
//   hot, expectObservable, expectSubscriptions, cold
// }                     from 'rxjs/testing'
const recover_1 = require("./recover$");
tstest_1.test('switchSuccess()', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const STATUS = true;
    const EXPECTED_RESULT = true;
    t.equal(recover_1.switchSuccess(STATUS), EXPECTED_RESULT, 'should get expected result');
}));
// test('switchSuccess()', async (t) => {
//   const SOURCE_MARBLES   = '-a-'
//   const EXPECTED_MARBLES = '-a-'
//   const scheduler = new TestScheduler((actual, expected) => {
//     t.deepEqual(actual, expected)
//     console.info('actual', actual)
//     console.info('expected', expected)
//   })
//   scheduler.expectObservable(observable).toBe(expectedMarbles);
//   scheduler.flush();
// })
//# sourceMappingURL=recover$.spec.js.map