#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const puppet_hostie_1 = require("./puppet-hostie");
tstest_1.test('version()', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const puppet = new puppet_hostie_1.PuppetHostie({
        token: 'test',
    });
    t.ok(puppet.version());
}));
/**
 * Huan(202003):
 *  need to setup a test server to provide test token for puppet hostie
 */
tstest_1.test.skip('PuppetHostie restart without problem', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const puppet = new puppet_hostie_1.PuppetHostie();
    try {
        for (let i = 0; i < 3; i++) {
            yield puppet.start();
            yield puppet.stop();
            t.pass('start/stop-ed at #' + i);
        }
        t.pass('PuppetHostie() start/restart successed.');
    }
    catch (e) {
        t.fail(e);
    }
}));
//# sourceMappingURL=puppet-hostie.spec.js.map