"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const grpc_1 = __importDefault(require("grpc"));
const grpc_2 = require("@chatie/grpc");
const config_1 = require("../config");
const puppet_implementation_1 = require("./puppet-implementation");
class PuppetServer {
    constructor(options) {
        this.options = options;
        config_1.log.verbose('PuppetServer', 'constructor({endpoint: "%s", puppet: "%s", token: "%s"})', options.endpoint, options.puppet, options.token);
    }
    version() {
        return config_1.VERSION;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetServer', `start()`);
            if (this.grpcServer) {
                throw new Error('grpc server existed!');
            }
            const puppetImpl = puppet_implementation_1.puppetImplementation(this.options.puppet);
            this.grpcServer = new grpc_1.default.Server();
            this.grpcServer.addService(grpc_2.PuppetService, puppetImpl);
            // 127.0.0.1:8788
            const port = this.grpcServer.bind(this.options.endpoint, grpc_1.default.ServerCredentials.createInsecure());
            if (port === 0) {
                throw new Error('grpc server bind fail!');
            }
            this.grpcServer.start();
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetServer', `stop()`);
            if (!this.grpcServer) {
                throw new Error('no grpc server');
            }
            yield util_1.default.promisify(this.grpcServer.tryShutdown
                .bind(this.grpcServer))();
            const grpcServer = this.grpcServer;
            setImmediate(() => grpcServer.forceShutdown());
            this.grpcServer = undefined;
        });
    }
}
exports.PuppetServer = PuppetServer;
//# sourceMappingURL=puppet-server.js.map