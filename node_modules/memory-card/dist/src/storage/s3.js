"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const s3_1 = __importDefault(require("aws-sdk/clients/s3"));
const config_1 = require("../config");
const backend_1 = require("./backend");
class StorageS3 extends backend_1.StorageBackend {
    constructor(name, options) {
        config_1.log.verbose('StorageS3', 'constructor()');
        options.type = 's3';
        super(name, options);
        options = options;
        this.s3 = new s3_1.default({
            credentials: {
                accessKeyId: options.accessKeyId,
                secretAccessKey: options.secretAccessKey,
            },
            region: options.region,
        });
    }
    toString() {
        const text = [
            this.constructor.name,
            '<',
            this.name,
            '>',
        ].join('');
        return text;
    }
    save(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageS3', 'save()');
            const options = this.options;
            yield this.s3.putObject({
                Body: JSON.stringify(payload),
                Bucket: options.bucket,
                Key: this.name,
            }).promise();
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageS3', 'load()');
            const options = this.options;
            try {
                const result = yield this.s3.getObject({
                    Bucket: options.bucket,
                    Key: this.name,
                }).promise();
                if (!result || !result.Body) {
                    return {};
                }
                return JSON.parse(result.Body.toString());
            }
            catch (e) {
                config_1.log.warn('StorageS3', 'load() exception: %s', e);
                return {};
            }
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageS3', 'destroy()');
            const options = this.options;
            yield this.s3.deleteObject({
                Bucket: options.bucket,
                Key: this.name,
            }).promise();
        });
    }
}
exports.StorageS3 = StorageS3;
//# sourceMappingURL=s3.js.map