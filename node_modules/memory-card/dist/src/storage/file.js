"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const config_1 = require("../config");
const backend_1 = require("./backend");
class StorageFile extends backend_1.StorageBackend {
    constructor(name, options) {
        config_1.log.verbose('StorageFile', 'constructor(%s, ...)', name);
        options.type = 'file';
        super(name, options);
        options = options;
        this.absFileName = path_1.default.isAbsolute(this.name)
            ? this.name
            : path_1.default.resolve(process.cwd(), this.name);
        if (!/\.memory-card\.json$/.test(this.absFileName)) {
            this.absFileName += '.memory-card.json';
        }
    }
    toString() {
        const text = [
            this.constructor.name,
            '<',
            this.absFileName,
            '>',
        ].join('');
        return text;
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageFile', 'load() from %s', this.absFileName);
            if (!fs_1.default.existsSync(this.absFileName)) {
                config_1.log.verbose('MemoryCard', 'load() file not exist, NOOP');
                return {};
            }
            const buffer = yield new Promise((resolve, reject) => fs_1.default.readFile(this.absFileName, (err, buf) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(buf);
                }
            }));
            const text = buffer.toString();
            let payload = {};
            try {
                payload = JSON.parse(text);
            }
            catch (e) {
                config_1.log.error('MemoryCard', 'load() exception: %s', e);
            }
            return payload;
        });
    }
    save(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageFile', 'save() to %s', this.absFileName);
            const text = JSON.stringify(payload);
            yield new Promise((resolve, reject) => {
                fs_1.default.writeFile(this.absFileName, text, err => err ? reject(err) : resolve());
            });
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageFile', 'destroy()');
            if (fs_1.default.existsSync(this.absFileName)) {
                fs_1.default.unlinkSync(this.absFileName);
            }
        });
    }
}
exports.StorageFile = StorageFile;
//# sourceMappingURL=file.js.map