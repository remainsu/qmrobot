#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-shadowed-variable
const blue_tape_1 = __importDefault(require("blue-tape"));
const memory_card_1 = require("../src/memory-card");
blue_tape_1.default('integrate testing', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const card = new memory_card_1.MemoryCard();
    yield card.load();
    t.equal(yield card.size, 0, 'init with 0');
    yield card.set('a', 'b');
    t.equal(yield card.size, 1, 'size with 1');
    t.equal(yield card.get('a'), 'b', 'get key a with value b');
    yield card.clear();
    t.equal(yield card.size, 0, 'clear reset to 0');
}));
//# sourceMappingURL=memory-card.spec.js.map