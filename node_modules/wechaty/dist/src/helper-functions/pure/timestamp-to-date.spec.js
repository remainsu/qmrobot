"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const timestamp_to_date_1 = require("./timestamp-to-date");
/**
 * 1e11
 *   in milliseconds:  Sat Mar 03 1973 09:46:39 UTC
 *   in seconds:       Wed Nov 16 5138 9:46:40 UTC
 */
tstest_1.test('timestampToDate() for dealing with seconds', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const SECONDS = 1e11 - 1;
    const EXPECTED_DATE_NOW = 'Wed, 16 Nov 5138 09:46:39 GMT';
    const date = timestamp_to_date_1.timestampToDate(SECONDS);
    t.equal(date.toUTCString(), EXPECTED_DATE_NOW, 'should parse seconds to right date');
}));
tstest_1.test('timestampToDate() for dealing with milliseconds', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const MILLISECONDS = 1e11 + 1;
    const EXPECTED_DATE_UTC = 'Sat, 03 Mar 1973 09:46:40 GMT';
    const date = timestamp_to_date_1.timestampToDate(MILLISECONDS);
    t.equal(date.toUTCString(), EXPECTED_DATE_UTC, 'should parse milliseconds to right date');
}));
//# sourceMappingURL=timestamp-to-date.spec.js.map