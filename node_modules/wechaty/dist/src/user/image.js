"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const clone_class_1 = require("clone-class");
const wechaty_puppet_1 = require("wechaty-puppet");
const accessory_1 = require("../accessory");
const config_1 = require("../config");
class Image extends accessory_1.Accessory {
    constructor(id) {
        super();
        this.id = id;
        config_1.log.verbose('Image', 'constructor(%s)', id, this.constructor.name);
        const MyClass = clone_class_1.instanceToClass(this, Image);
        if (MyClass === Image) {
            throw new Error('Image class can not be instanciated directly! See: https://github.com/wechaty/wechaty/issues/1217');
        }
        if (!this.puppet) {
            throw new Error('Image class can not be instanciated without a puppet!');
        }
    }
    static create(id) {
        config_1.log.verbose('Image', 'static create(%s)', id);
        const image = new this(id);
        return image;
    }
    thumbnail() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('Image', 'thumbnail() for id: "%s"', this.id);
            const fileBox = yield this.puppet.messageImage(this.id, wechaty_puppet_1.ImageType.Thumbnail);
            return fileBox;
        });
    }
    hd() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('Image', 'hd() for id: "%s"', this.id);
            const fileBox = yield this.puppet.messageImage(this.id, wechaty_puppet_1.ImageType.HD);
            return fileBox;
        });
    }
    artwork() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('Image', 'artwork() for id: "%s"', this.id);
            const fileBox = yield this.puppet.messageImage(this.id, wechaty_puppet_1.ImageType.Artwork);
            return fileBox;
        });
    }
}
exports.Image = Image;
//# sourceMappingURL=image.js.map