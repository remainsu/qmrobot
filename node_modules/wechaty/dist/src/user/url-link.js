"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = __importDefault(require("url"));
const config_1 = require("../config");
const open_graph_1 = require("../helper-functions/impure/open-graph");
class UrlLink {
    /*
     * @hideconstructor
     */
    constructor(payload) {
        this.payload = payload;
        config_1.log.verbose('UrlLink', 'constructor()');
    }
    /**
     *
     * Create from URL
     *
     */
    static create(url) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('UrlLink', 'create(%s)', url);
            const meta = yield open_graph_1.openGraph(url);
            let description;
            let imageUrl;
            let title;
            if (meta.image) {
                if (typeof meta.image === 'string') {
                    imageUrl = meta.image;
                }
                else if (Array.isArray(meta.image)) {
                    imageUrl = meta.image[0];
                }
                else {
                    if (Array.isArray(meta.image.url)) {
                        imageUrl = meta.image.url[0];
                    }
                    else if (meta.image.url) {
                        imageUrl = meta.image.url;
                    }
                }
            }
            if (Array.isArray(meta.title)) {
                title = meta.title[0];
            }
            else {
                title = meta.title;
            }
            if (Array.isArray(meta.description)) {
                description = meta.description[0];
            }
            else if (meta.description) {
                description = meta.description;
            }
            else {
                description = title;
            }
            if (!imageUrl || !description) {
                throw new Error(`imageUrl(${imageUrl}) or description(${description}) not found!`);
            }
            if (!imageUrl.startsWith('http')) {
                const resolvedUrl = new url_1.default.URL(imageUrl, url);
                imageUrl = resolvedUrl.toString();
            }
            const payload = {
                description,
                thumbnailUrl: imageUrl,
                title,
                url,
            };
            return new UrlLink(payload);
        });
    }
    toString() {
        return `UrlLink<${this.payload.url}>`;
    }
    url() {
        return this.payload.url;
    }
    title() {
        return this.payload.title;
    }
    thumbnailUrl() {
        return this.payload.thumbnailUrl;
    }
    description() {
        return this.payload.description;
    }
}
exports.UrlLink = UrlLink;
//# sourceMappingURL=url-link.js.map