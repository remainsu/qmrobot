import { ContactPayload, FileBox, FriendshipPayload, ImageType, MessagePayload, MiniProgramPayload, Puppet, PuppetOptions, RoomInvitationPayload, RoomMemberPayload, RoomPayload, UrlLinkPayload } from 'wechaty-puppet';
import { PadplusContactPayload, PadplusRoomPayload, PadplusRoomMemberPayload, PadplusRoomInvitationPayload, FriendshipPayload as PadplusFriendshipPayload, GetContactSelfInfoGrpcResponse, LoginDeviceInfo } from './schemas';
import { PadplusMessagePayload } from './schemas/model-message';
export declare class PuppetPadplus extends Puppet {
    options: PuppetOptions;
    private manager;
    private leaveEventKey;
    constructor(options?: PuppetOptions);
    start(): Promise<void>;
    private startManager;
    stop(): Promise<void>;
    /**
     * Three type for logout case:
     *   - case 1: logout by WeChat App, need reset
     *   - case 2: logout by call API, need reset
     *   - case 3: logout by call reset, no need reset
     * @param force case 1: true, case 2: false, case 3: true
     * @param reason
     */
    logout(force?: boolean, reason?: string): Promise<void>;
    onMessage(message: PadplusMessagePayload): Promise<void>;
    /**
     * ========================
     *     TAG SECTION
     * ========================
     */
    tagContactAdd(name: string, contactId: string): Promise<void>;
    tagContactRemove(name: string, contactId: string): Promise<void>;
    tagContactDelete(name: string): Promise<void>;
    tagContactList(contactId?: string): Promise<string[]>;
    /**
     * ========================
     *     CONTACT SECTION
     * ========================
     */
    contactSelfQRCode(): Promise<string>;
    contactSelfName(name: string): Promise<void>;
    contactSelfSignature(signature: string): Promise<void>;
    contactSelfInfo(): Promise<GetContactSelfInfoGrpcResponse>;
    contactAlias(contactId: string): Promise<string>;
    contactAlias(contactId: string, alias: string | null): Promise<void>;
    contactAvatar(contactId: string): Promise<FileBox>;
    contactAvatar(contactId: string, file: FileBox): Promise<void>;
    contactList(): Promise<string[]>;
    protected contactRawPayload(contactId: string): Promise<PadplusContactPayload>;
    protected contactRawPayloadParser(rawPayload: PadplusContactPayload): Promise<ContactPayload>;
    /**
     * =========================
     *    FRIENDSHIP SECTION
     * =========================
     */
    onFriendshipEvent(message: PadplusMessagePayload): Promise<void>;
    friendshipSearchPhone(phone: string): Promise<string | null>;
    friendshipSearchWeixin(weixin: string): Promise<string | null>;
    friendshipAdd(contactId: string, hello?: string): Promise<void>;
    friendshipAccept(friendshipId: string): Promise<void>;
    protected friendshipRawPayload(friendshipId: string): Promise<PadplusFriendshipPayload>;
    protected friendshipRawPayloadParser(rawPayload: PadplusFriendshipPayload): Promise<FriendshipPayload>;
    friendshipPayload(friendshipId: string): Promise<FriendshipPayload>;
    friendshipPayload(friendshipId: string, friendshipPayload: FriendshipPayload): Promise<void>;
    /**
     * =========================
     *   MESSAGE IMAGE SECTION
     * =========================
     */
    messageImage(messageId: string, type: ImageType): Promise<FileBox>;
    /**
     * ========================
     *     MESSAGE SECTION
     * ========================
     */
    messageFile(messageId: string): Promise<FileBox>;
    private getNameFromUrl;
    messageUrl(messageId: string): Promise<UrlLinkPayload>;
    messageContact(messageId: string): Promise<string>;
    messageMiniProgram(messageId: string): Promise<MiniProgramPayload>;
    messageForward(conversationId: string, messageId: string): Promise<void>;
    private generateBaseMsg;
    messageSendText(conversationId: string, text: string, mentionIdList?: string[]): Promise<void | string>;
    private replayTextMsg;
    protected generateMsgSource(mentionIdList?: string[]): string;
    messageSendVoice(conversationId: string, url: string, fileSize: string): Promise<void | string>;
    messageSendContact(conversationId: string, contactId: string): Promise<void | string>;
    private replayContactMsg;
    messageSendFile(conversationId: string, file: FileBox): Promise<void | string>;
    private replayImageMsg;
    private replayAppMsg;
    messageSendUrl(conversationId: string, urlLinkPayload: UrlLinkPayload): Promise<void | string>;
    private replayUrlLinkMsg;
    messageSendMiniProgram(conversationId: string, miniProgramPayload: MiniProgramPayload): Promise<string | void>;
    messageRawPayload(messageId: string): Promise<PadplusMessagePayload>;
    messageRawPayloadParser(rawPayload: PadplusMessagePayload): Promise<MessagePayload>;
    messageRecall(messageId: string): Promise<boolean>;
    /**
     * ========================
     *      ROOM SECTION
     * ========================
     */
    protected onRoomJoinEvent(message: PadplusMessagePayload): Promise<void>;
    protected onRoomLeaveEvent(message: PadplusMessagePayload): Promise<void>;
    protected onRoomTopicEvent(message: PadplusMessagePayload): Promise<void>;
    protected onRoomInvitation(rawPayload: PadplusMessagePayload): Promise<void>;
    roomInvitationAccept(roomInvitationId: string): Promise<void>;
    roomInvitationRawPayload(roomInvitationId: string): Promise<PadplusRoomInvitationPayload>;
    roomInvitationRawPayloadParser(rawPayload: PadplusRoomInvitationPayload): Promise<RoomInvitationPayload>;
    roomAvatar(roomId: string): Promise<FileBox>;
    roomCreate(contactIdList: string[], topic?: string | undefined): Promise<string>;
    roomAdd(roomId: string, contactId: string): Promise<void>;
    roomDel(roomId: string, contactId: string): Promise<void>;
    roomQuit(roomId: string): Promise<void>;
    roomTopic(roomId: string): Promise<string>;
    roomTopic(roomId: string, topic: string): Promise<void>;
    roomTopic(roomId: string, topic?: string | undefined): Promise<string | void>;
    roomQRCode(roomId: string): Promise<string>;
    roomList(): Promise<string[]>;
    roomMemberList(roomId: string): Promise<string[]>;
    protected roomRawPayload(roomId: string): Promise<PadplusRoomPayload>;
    protected roomRawPayloadParser(rawPayload: PadplusRoomPayload): Promise<RoomPayload>;
    protected roomMemberRawPayload(roomId: string, contactId: string): Promise<PadplusRoomMemberPayload>;
    protected roomMemberRawPayloadParser(rawPayload: PadplusRoomMemberPayload): Promise<RoomMemberPayload>;
    roomAnnounce(roomId: string): Promise<string>;
    roomAnnounce(roomId: string, text: string): Promise<void>;
    /**
     * External method
     */
    reconnect(): Promise<void>;
    loginDevice(): Promise<LoginDeviceInfo>;
    ding(data?: string): void;
    private deduplicateRoomLeaveEvent;
}
export default PuppetPadplus;
//# sourceMappingURL=puppet-padplus.d.ts.map