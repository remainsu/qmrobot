import { log } from 'brolog';
export declare const padplusToken: () => string;
export declare const INVALID_TOKEN_MESSAGE = "\n\n\n===========================================================================================\n\n      The token is invalid, please use an valid token to access padplus\n\n      \u4F60\u4F7F\u7528\u7684Token\u662F\u65E0\u6548\u7684\uFF0C\u8BF7\u4F7F\u7528\u6709\u6548Token\n\n============================================================================================\n\n\n";
export declare const EXPIRED_TOKEN_MESSAGE = "\n\n\n===========================================================================================\n\n      The token you are using is expired, please renew this token\n\n      \u4F60\u4F7F\u7528\u7684Token\u5DF2\u7ECF\u8FC7\u671F\u4E86\uFF0C\u5982\u679C\u4F60\u60F3\u7EE7\u7EED\u4F7F\u7528wechaty-puppet-padplus\uFF0C\u8BF7\u7EED\u8D39\u4F60\u7684Token\n\n============================================================================================\n\n\n";
export declare const PADPLUS_REPLAY_MESSAGE: boolean;
export declare const GRPC_ENDPOINT: string;
export declare const MESSAGE_CACHE_AGE: number;
export declare const MESSAGE_CACHE_MAX = 1000;
export declare const WAIT_FOR_READY_TIME: number;
export declare const COMPACT_CACHE_FIRST_START: number;
export declare const COMPACT_CACHE_INTERVAL: number;
export { log, };
export declare const AWS_S3: {
    ACCESS_KEY_ID: string;
    BUCKET: string;
    EXPIRE_TIME: number;
    PATH: string;
    SECRET_ACCESS_KEY: string;
};
export declare function retry<T>(retryableFn: (retry: (error: Error) => never, attempt: number) => Promise<T>, num?: number): Promise<T>;
//# sourceMappingURL=config.d.ts.map