"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const PadPlusServer_pb_1 = require("../../server-manager/proto-ts/PadPlusServer_pb");
const PRE = 'PadplusFriendship';
class PadplusFriendship {
    constructor(requestClient) {
        // confirm friendship
        this.confirmFriendship = (encryptUserName, ticket, scene) => __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose(PRE, `confirmFriendship()`);
            const data = {
                type: scene,
                userName: encryptUserName,
                verifyUserTicket: ticket,
            };
            yield this.requestClient.request({
                apiType: PadPlusServer_pb_1.ApiType.ACCEPT_CONTACT,
                data,
            });
            return true;
        });
        this.addFriend = (strangerV1, strangerV2, isPhoneNumber, contactId, hello) => __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose(PRE, `addFriend()`);
            const data = {
                type: isPhoneNumber,
                userName: contactId,
                v1: strangerV1,
                v2: strangerV2,
                verify: hello,
            };
            const result = yield this.requestClient.request({
                apiType: PadPlusServer_pb_1.ApiType.ADD_CONTACT,
                data,
            });
            if (result) {
                const addFriendStr = result.getData();
                if (addFriendStr) {
                    const addFriend = JSON.parse(addFriendStr);
                    if (addFriend && addFriend.status !== '0') {
                        throw new Error(`Can not add friend, status: ${addFriend.status}, reason: ${addFriend.message || 'unknow'}`);
                    }
                    else {
                        return addFriend;
                    }
                }
                else {
                    throw new Error(`addFriend can not parse data`);
                }
            }
            else {
                throw new Error(`can not get callback result of ADD_CONTACT`);
            }
        });
        this.requestClient = requestClient;
    }
}
exports.PadplusFriendship = PadplusFriendship;
//# sourceMappingURL=friendship.js.map