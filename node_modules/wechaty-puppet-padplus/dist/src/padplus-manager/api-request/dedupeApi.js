"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rx_queue_1 = require("rx-queue");
const config_1 = require("../../config");
const PadPlusServer_pb_1 = require("../../server-manager/proto-ts/PadPlusServer_pb");
const util_1 = require("../../utils/util");
// Expire time for api call data that persist in the pool
// Number of seconds
const EXPIRE_TIME = 10;
const DEDUPE_API = [
    PadPlusServer_pb_1.ApiType.GET_CONTACT,
    PadPlusServer_pb_1.ApiType.GET_ROOM_MEMBER,
];
const PRE = 'DedupeApi';
/**
 * This class will dedupe api calls
 * Multiple calls within a period of time will only fire up one api call to the server,
 * all the other calls will get the same response as the fired one
 *
 * Only api calls in the DEDUPE_API list will be affected.
 */
class DedupeApi {
    constructor() {
        this.pool = {};
        this.cleaner = setInterval(this.cleanData, EXPIRE_TIME * 1000);
        this.apiQueue = new rx_queue_1.DelayQueueExecutor(200);
    }
    dedupe(func, apiName, uin, params, forceCall) {
        return __awaiter(this, void 0, void 0, function* () {
            if (DEDUPE_API.indexOf(apiName) === -1) {
                config_1.log.silly(PRE, `dedupe() no need to dedupe api ${util_1.ApiTypeDic[apiName]}.`);
                return func(apiName, uin, params);
            }
            config_1.log.silly(PRE, `dedupeApi(${apiName}, ${uin}, ${params ? JSON.stringify(params) : ''})`);
            const key = this.getKey(apiName, uin, params);
            if (forceCall) {
                delete this.pool[key];
            }
            const existCall = this.pool[key];
            const now = new Date().getTime();
            if (existCall && now - existCall.timestamp < EXPIRE_TIME * 1000) {
                if (existCall.returned) {
                    config_1.log.silly(PRE, `dedupeApi(${apiName}) dedupe api call with existing results.`);
                    return existCall.result;
                }
                else {
                    config_1.log.silly(PRE, `dedupeApi(${apiName}) dedupe api call with pending listener.`);
                    return new Promise((resolve, reject) => {
                        existCall.listener.push({
                            reject,
                            resolve,
                        });
                    });
                }
            }
            else {
                config_1.log.silly(PRE, `dedupeApi(${apiName}) dedupe api call missed, call the external service.`);
                this.pool[key] = {
                    listener: [],
                    returned: false,
                    timestamp: now,
                };
                let result;
                try {
                    result = yield this.apiQueue.execute(() => func(apiName, uin, params));
                }
                catch (e) {
                    config_1.log.silly(PRE, `dedupeApi(${apiName}) failed from external service, reject ${this.pool[key].listener.length} duplicate api calls.`);
                    this.pool[key].listener.map(api => {
                        api.reject(e);
                    });
                    this.pool[key].listener = [];
                    throw e;
                }
                this.pool[key].result = result;
                this.pool[key].returned = true;
                config_1.log.silly(PRE, `dedupeApi(${apiName}) got results from external service, resolve ${this.pool[key].listener.length} duplicate api calls.`);
                this.pool[key].listener.map(api => {
                    api.resolve(result);
                });
                this.pool[key].listener = [];
                return result;
            }
        });
    }
    clean() {
        for (const key in this.pool) {
            if (this.pool.hasOwnProperty(key)) {
                this.pool[key].listener.forEach(api => api.reject('Clean up api calls.'));
                delete this.pool[key];
            }
        }
        clearInterval(this.cleaner);
    }
    /**
     * Get rid of data in pool that exists for more than EXPIRE_TIME
     */
    cleanData() {
        const now = new Date().getTime();
        for (const key in this.pool) {
            if (this.pool.hasOwnProperty(key)) {
                const apiCache = this.pool[key];
                if (apiCache.timestamp - now > EXPIRE_TIME * 1000) {
                    delete this.pool[key];
                }
            }
        }
    }
    getKey(apiName, uin, params) {
        return `${apiName}-${uin}-${params ? JSON.stringify(params) : ''}`;
    }
}
exports.DedupeApi = DedupeApi;
//# sourceMappingURL=dedupeApi.js.map