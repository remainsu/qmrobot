"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const PadPlusServer_pb_1 = require("../../server-manager/proto-ts/PadPlusServer_pb");
const PRE = 'PadplusUser';
class PadplusUser {
    // private token: string
    constructor(requestClient) {
        // get qrcode for login WeChat
        this.getWeChatQRCode = (data) => __awaiter(this, void 0, void 0, function* () {
            if (data) {
                const res = yield this.requestClient.request({
                    apiType: PadPlusServer_pb_1.ApiType.GET_QRCODE,
                    data,
                });
                config_1.log.silly(PRE, `Get qrcode with user info, res : ${JSON.stringify(res)}`);
                return res;
            }
            else {
                const res = yield this.requestClient.request({
                    apiType: PadPlusServer_pb_1.ApiType.GET_QRCODE,
                });
                config_1.log.silly(PRE, `Get qrcode without user info, res : ${JSON.stringify(res)}`);
                return res;
            }
        });
        this.requestClient = requestClient;
    }
    // init
    initInstance() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly(PRE, `initInstance()`);
            const res = yield this.requestClient.request({
                apiType: PadPlusServer_pb_1.ApiType.INIT,
            });
            if (!res) {
                config_1.log.error(PRE, `can not get callback result of INIT`);
                return false;
            }
            const resultStr = res.getData();
            const result = JSON.parse(resultStr);
            if (result && result.message !== 'success') {
                return false;
            }
            config_1.log.silly(PRE, `init success`);
            return false;
        });
    }
    // grpc server reconnect
    reconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly(PRE, `reconnect()`);
            yield this.requestClient.request({
                apiType: PadPlusServer_pb_1.ApiType.RECONNECT,
            });
        });
    }
    loginDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly(PRE, `loginDevice()`);
            const res = yield this.requestClient.request({
                apiType: PadPlusServer_pb_1.ApiType.LOGIN_DEVICE,
            });
            if (!res) {
                throw new Error(`can not get callback result of LOGIN_DEVICE`);
            }
            else {
                const resultStr = res.getData();
                if (resultStr) {
                    const result = JSON.parse(resultStr);
                    const loginDeviceInfo = {
                        childId: result.childId,
                        deviceName: result.deviceInfo.deviceName,
                        headImgUrl: result.headImgUrl,
                        loginType: result.loginType,
                        nickName: result.nickName,
                        token: result.token,
                        uin: result.uin,
                        userName: result.userName,
                        wechatUserId: result.wechatUserId,
                    };
                    return loginDeviceInfo;
                }
                else {
                    throw new Error(`can not parse result of LOGIN_DEVICE`);
                }
            }
        });
    }
    // logout WeChat
    logout(wxid) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly(PRE, `logout()`);
            const data = {
                wxid,
            };
            const res = yield this.requestClient.request({
                apiType: PadPlusServer_pb_1.ApiType.LOGOUT,
                data,
            });
            if (!res) {
                config_1.log.error(PRE, `can not get callback result of LOGOUT`);
                return false;
            }
            else {
                const resultStr = res.getData();
                if (resultStr) {
                    const result = JSON.parse(resultStr);
                    if (result && result.code === 200 && result.mqType === 1100) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
        });
    }
}
exports.PadplusUser = PadplusUser;
//# sourceMappingURL=user.js.map