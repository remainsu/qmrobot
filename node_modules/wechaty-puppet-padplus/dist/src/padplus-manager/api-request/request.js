"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const config_1 = require("../../config");
const PadPlusServer_pb_1 = require("../../server-manager/proto-ts/PadPlusServer_pb");
const dedupeApi_1 = require("./dedupeApi");
const PRE = 'RequestClient';
class RequestClient {
    constructor(grpcGateway, emitter) {
        this.grpcGateway = grpcGateway;
        this.emitter = emitter;
        this.dedupeApi = new dedupeApi_1.DedupeApi();
    }
    request(option) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly(PRE, `request()`);
            let uin;
            if (option.apiType === PadPlusServer_pb_1.ApiType.GET_QRCODE) {
                uin = this.emitter.getUIN() || (option.data && option.data.uin);
            }
            else {
                uin = this.emitter.getUIN();
            }
            return this.dedupeApi.dedupe(this.grpcGateway.request.bind(this.grpcGateway), option.apiType, uin, option.data);
        });
    }
    uploadFile(filename, stream) {
        return __awaiter(this, void 0, void 0, function* () {
            let params = {
                ACL: 'public-read',
                Body: stream,
                Bucket: config_1.AWS_S3.BUCKET,
                Key: config_1.AWS_S3.PATH + '/' + filename,
            };
            aws_sdk_1.default.config.accessKeyId = config_1.AWS_S3.ACCESS_KEY_ID;
            aws_sdk_1.default.config.secretAccessKey = config_1.AWS_S3.SECRET_ACCESS_KEY;
            const s3 = new aws_sdk_1.default.S3({ region: 'cn-northwest-1', signatureVersion: 'v4' });
            const result = yield new Promise((resolve, reject) => {
                s3.upload(params, (err, data) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(data);
                    }
                });
            });
            const location = result.Location;
            const _location = location.split(config_1.AWS_S3.PATH)[0] + encodeURIComponent(params.Key);
            return _location;
        });
    }
}
exports.RequestClient = RequestClient;
//# sourceMappingURL=request.js.map