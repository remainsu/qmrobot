"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable sort-keys */
const xml_to_json_1 = require("./xml-to-json");
const wechaty_puppet_1 = require("wechaty-puppet");
const friendship_event_message_parser_1 = require("./friendship-event-message-parser");
const friendshipTypeMap = {
    '1': wechaty_puppet_1.FriendshipSceneType.QQ,
    '2': wechaty_puppet_1.FriendshipSceneType.Email,
    '3': wechaty_puppet_1.FriendshipSceneType.Weixin,
    '12': wechaty_puppet_1.FriendshipSceneType.QQtbd,
    '14': wechaty_puppet_1.FriendshipSceneType.Room,
    '15': wechaty_puppet_1.FriendshipSceneType.Phone,
    '17': wechaty_puppet_1.FriendshipSceneType.Card,
    '18': wechaty_puppet_1.FriendshipSceneType.Location,
    '25': wechaty_puppet_1.FriendshipSceneType.Bottle,
    '29': wechaty_puppet_1.FriendshipSceneType.Shaking,
    '30': wechaty_puppet_1.FriendshipSceneType.QRCode,
};
function friendshipRawPayloadParser(rawPayload) {
    return __awaiter(this, void 0, void 0, function* () {
        if (friendship_event_message_parser_1.friendshipConfirmEventMessageParser(rawPayload)) {
            /**
             * 1. Confirm Event
             */
            return friendshipRawPayloadParserConfirm(rawPayload);
        }
        else if (friendship_event_message_parser_1.friendshipVerifyEventMessageParser(rawPayload)) {
            /**
             * 2. Verify Event
             */
            return friendshipRawPayloadParserVerify(rawPayload);
        }
        else if (yield friendship_event_message_parser_1.friendshipReceiveEventMessageParser(rawPayload)) {
            /**
             * 3. Receive Event
             */
            return friendshipRawPayloadParserReceive(rawPayload);
        }
        else {
            throw new Error('event type is neither confirm nor verify, and not receive');
        }
    });
}
exports.friendshipRawPayloadParser = friendshipRawPayloadParser;
function friendshipRawPayloadParserConfirm(rawPayload) {
    return __awaiter(this, void 0, void 0, function* () {
        const payload = {
            contactId: rawPayload.fromUserName,
            id: rawPayload.msgId,
            timestamp: rawPayload.createTime,
            type: wechaty_puppet_1.FriendshipType.Confirm,
        };
        return payload;
    });
}
function friendshipRawPayloadParserVerify(rawPayload) {
    const payload = {
        contactId: rawPayload.fromUserName,
        id: rawPayload.msgId,
        timestamp: rawPayload.createTime,
        type: wechaty_puppet_1.FriendshipType.Verify,
    };
    return payload;
}
function friendshipRawPayloadParserReceive(rawPayload) {
    return __awaiter(this, void 0, void 0, function* () {
        const tryXmlText = rawPayload.content;
        const jsonPayload = yield xml_to_json_1.xmlToJson(tryXmlText); // , { object: true })
        if (!jsonPayload.msg) {
            throw new Error('no msg found');
        }
        const padplusFriendshipPayload = jsonPayload.msg.$;
        const friendshipPayload = {
            contactId: padplusFriendshipPayload.fromusername,
            hello: padplusFriendshipPayload.content,
            id: rawPayload.msgId,
            scene: friendshipTypeMap[padplusFriendshipPayload.scene],
            stranger: padplusFriendshipPayload.encryptusername,
            ticket: padplusFriendshipPayload.ticket,
            timestamp: rawPayload.createTime,
            type: wechaty_puppet_1.FriendshipType.Receive,
        };
        return friendshipPayload;
    });
}
//# sourceMappingURL=friendship-raw-payload-parser.js.map