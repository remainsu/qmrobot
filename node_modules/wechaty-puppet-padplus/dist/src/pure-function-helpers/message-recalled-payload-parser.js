"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_type_1 = require("./is-type");
const xml_to_json_1 = require("./xml-to-json");
function recalledPayloadParser(rawPayload) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!is_type_1.isPayload(rawPayload)) {
            return null;
        }
        let text;
        if (is_type_1.isRoomId(rawPayload.fromUserName)) {
            const startIndex = rawPayload.content.indexOf(':\n');
            text = rawPayload.content.slice(startIndex !== -1 ? startIndex + 2 : 0);
        }
        else {
            text = rawPayload.content;
        }
        try {
            const jsonPayload = yield xml_to_json_1.xmlToJson(text);
            const result = {
                msgId: jsonPayload.sysmsg.revokemsg.msgid,
                newMsgId: jsonPayload.sysmsg.revokemsg.newmsgid,
                replaceMsg: jsonPayload.sysmsg.revokemsg.replacemsg,
                session: jsonPayload.sysmsg.revokemsg.session,
            };
            return result;
        }
        catch (e) {
            return null;
        }
    });
}
exports.recalledPayloadParser = recalledPayloadParser;
//# sourceMappingURL=message-recalled-payload-parser.js.map