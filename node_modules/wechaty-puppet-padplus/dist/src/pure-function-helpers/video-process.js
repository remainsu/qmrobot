"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const wechaty_puppet_1 = require("wechaty-puppet");
const extractFrames = require('ffmpeg-extract-frames');
const probe = require('ffmpeg-probe');
function videoPreProcess(request, url) {
    return __awaiter(this, void 0, void 0, function* () {
        const name = `screenshot-${Date.now()}.jpg`;
        const path = './screenshot/' + name;
        yield extractFrames({
            input: url,
            offsets: [1],
            output: path,
        });
        const info = yield probe(url);
        const fileBox = wechaty_puppet_1.FileBox.fromFile(path);
        const thumb = yield request.uploadFile(name, yield fileBox.toStream());
        const videoContent = {
            cdnthumbheight: info.height,
            cdnthumbwidth: info.width,
            playlength: info.duration / 1000,
            thumb,
            url,
        };
        return videoContent;
    });
}
exports.videoPreProcess = videoPreProcess;
//# sourceMappingURL=video-process.js.map