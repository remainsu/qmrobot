"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const brolog_1 = require("brolog");
exports.log = brolog_1.log;
const promiseRetry = require("promise-retry");
exports.padplusToken = () => {
    const token = process.env.WECHATY_PUPPET_PADPLUS_TOKEN;
    if (!token) {
        brolog_1.log.error('PuppetPadplusConfig', `

      WECHATY_PUPPET_PADPLUS_TOKEN environment variable not found.

      PuppetPadplus need a token before it can be used,
      Please set WECHATY_PUPPET_PADPLUS_TOKEN then retry again.

    `);
        throw new Error('You need a valid WECHATY_PUPPET_PADPLUS_TOKEN to use PuppetPadplus');
    }
    return token;
};
exports.INVALID_TOKEN_MESSAGE = `


===========================================================================================

      The token is invalid, please use an valid token to access padplus

      你使用的Token是无效的，请使用有效Token

============================================================================================


`;
exports.EXPIRED_TOKEN_MESSAGE = `


===========================================================================================

      The token you are using is expired, please renew this token

      你使用的Token已经过期了，如果你想继续使用wechaty-puppet-padplus，请续费你的Token

============================================================================================


`;
exports.PADPLUS_REPLAY_MESSAGE = process.env.PADPLUS_REPLAY_MESSAGE === 'true';
/**
 * GRPC server
 */
const WECHATY_PUPPET_PADPLUS_ENDPOINT_ENV_VAR = 'WECHATY_PUPPET_PADPLUS_ENDPOINT';
exports.GRPC_ENDPOINT = process.env[WECHATY_PUPPET_PADPLUS_ENDPOINT_ENV_VAR] || 'padplus.juzibot.com:50051';
exports.MESSAGE_CACHE_AGE = 1000 * 60 * 60;
exports.MESSAGE_CACHE_MAX = 1000;
exports.WAIT_FOR_READY_TIME = 1000 * 60 * 1;
exports.COMPACT_CACHE_FIRST_START = 1000 * 60 * 15;
exports.COMPACT_CACHE_INTERVAL = 1000 * 60 * 60;
const logLevel = process.env.PADPLUS_LOG || process.env.WECHATY_LOG;
if (logLevel) {
    brolog_1.log.level(logLevel.toLowerCase());
    brolog_1.log.silly('Config', 'PADPLUS_LOG set level to %s', logLevel);
}
exports.AWS_S3 = {
    ACCESS_KEY_ID: 'AKIA3PQY2OQG5FEXWMH6',
    BUCKET: 'macpro-message-file',
    EXPIRE_TIME: 3600 * 24 * 3,
    PATH: 'image-message',
    SECRET_ACCESS_KEY: 'jw7Deo+W8l4FTOL2BXd/VubTJjt1mhm55sRhnsEn',
};
function retry(retryableFn, num) {
    return __awaiter(this, void 0, void 0, function* () {
        const factor = 3;
        const minTimeout = 10;
        const maxTimeout = (num || 20) * 1000;
        const retries = 9;
        const retryOptions = {
            factor,
            maxTimeout,
            minTimeout,
            retries,
        };
        return promiseRetry(retryOptions, retryableFn);
    });
}
exports.retry = retry;
//# sourceMappingURL=config.js.map