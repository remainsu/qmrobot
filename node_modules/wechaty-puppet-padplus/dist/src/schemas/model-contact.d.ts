import { ContactGender } from 'wechaty-puppet';
export interface PadplusContactPayload {
    alias: string;
    contactType: number;
    tagList: string;
    bigHeadUrl: string;
    city: string;
    country: string;
    nickName: string;
    province: string;
    remark: string;
    sex: ContactGender;
    signature: string;
    smallHeadUrl: string;
    stranger: string;
    ticket: string;
    userName: string;
    verifyFlag: number;
    contactFlag: number;
}
export interface GrpcContactPayload {
    Alias: string;
    BigHeadImgUrl: string;
    ChatRoomOwner: string;
    ChatroomVersion: number;
    City: string;
    ContactFlag: number;
    ContactType: string;
    EncryptUsername: string;
    ExtInfo: string;
    ExtInfoExt: string;
    HeadImgUrl: string;
    LabelLists: string;
    MsgType: number;
    NickName: string;
    Province: string;
    PYInitial: string;
    PYQuanPin: string;
    Remark: string;
    RemarkName: string;
    RemarkPYInitial: string;
    RemarkPYQuanPin: string;
    Seq: string;
    Sex: number;
    Signature: string;
    SmallHeadImgUrl: string;
    Type7?: string;
    Uin: number;
    UserName: string;
    VerifyFlag: number;
    wechatUserName: string;
}
export interface GrpcSearchContact {
    avatar: string;
    v1: string;
    v2: string;
    searchId: string;
    nickName: string;
    wxid: string;
    message: string;
    status: string;
}
export interface GrpcDeleteContact {
    field: string;
    loginer: string;
    mqType: number;
    source: string;
    uin: string;
    userName: string;
}
export interface ContactQrcodeGrpcResponse {
    status: number;
    message: string;
    loginer: string;
    uin: string;
    userName: string;
    queueName: string;
    qrcodeBuf: string;
    style: number;
}
export interface SetContactSelfInfoGrpcResponse {
    status: number;
    message: string;
    loginer: string;
    uin: string;
    userName: string;
    queueName: string;
    updateData: ContactSelfUpdateInfo;
}
export interface ContactSelfUpdateInfo {
    nickName?: string;
    sex?: number;
    area?: string;
    signature?: string;
}
export interface GetContactSelfInfoGrpcResponse {
    alias: string;
    bigHeadImg: string;
    bindEmail: string;
    bindMobile: string;
    bindQQ: number;
    bytes: string;
    city: string;
    country: string;
    loginer: string;
    message: string;
    nickName: string;
    province: string;
    queueName: string;
    sex: number;
    signature: string;
    smallHeadImg: string;
    snsBGImg: string;
    status: number;
    uin: string;
    userName: string;
}
//# sourceMappingURL=model-contact.d.ts.map