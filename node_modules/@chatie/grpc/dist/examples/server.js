"use strict";
/* eslint-disable sort-keys */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc_1 = __importDefault(require("grpc"));
const index_1 = require("../src/index");
// import { StringValue } from 'google-protobuf/google/protobuf/wrappers_pb'
const puppet_server_impl_1 = require("../tests/puppet-server-impl");
let eventStream;
let dingQueue = [];
/**
 * Implements the SayHello RPC method.
 */
const puppetServerExample = Object.assign(Object.assign({}, puppet_server_impl_1.puppetServerImpl), { event: (streammingCall) => {
        console.info('event(streamingCall)');
        if (eventStream) {
            console.info('event() end old eventStream to accept the new one.');
            eventStream.end();
            eventStream = streammingCall;
        }
        eventStream = streammingCall;
        while (dingQueue.length > 0) {
            const data = dingQueue.shift();
            const eventResponse = new index_1.EventResponse();
            eventResponse.setType(index_1.EventType.EVENT_TYPE_DONG);
            eventResponse.setPayload(data);
            eventStream.write(eventResponse);
        }
        /**
          * Detect if Inexor Core is gone (GRPC disconnects)
          *  https://github.com/grpc/grpc/issues/8117#issuecomment-362198092
          */
        eventStream.on('cancelled', () => {
            console.info('eventStream.on(calcelled)');
            eventStream === null || eventStream === void 0 ? void 0 : eventStream.end();
            eventStream = undefined;
        });
    }, ding: (call, callback) => {
        const data = call.request.getData();
        console.info(`ding(${data})`);
        if (!eventStream) {
            dingQueue.push(data);
        }
        else {
            const eventResponse = new index_1.EventResponse();
            eventResponse.setType(index_1.EventType.EVENT_TYPE_DONG);
            eventResponse.setPayload(data);
            eventStream.write(eventResponse);
        }
        callback(null, new index_1.DingResponse());
    } });
/**
 * Starts an RPC server that receives requests for the Greeter service at the
 * sample server port
 */
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const server = new grpc_1.default.Server();
        server.addService(index_1.PuppetService, puppetServerExample);
        server.bind('127.0.0.1:8788', grpc_1.default.ServerCredentials.createInsecure());
        server.start();
        return 0;
    });
}
main()
    // .then(process.exit)
    .catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=server.js.map