"use strict";
// tslint:disable:no-console
// tslint:disable:max-line-length
// tslint:disable:no-shadowed-variable
// tslint:disable:callable-types
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const grpc_1 = __importDefault(require("grpc"));
const src_1 = require("../src/");
const wrappers_pb_1 = require("google-protobuf/google/protobuf/wrappers_pb");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const client = new src_1.PuppetClient('localhost:8788', grpc_1.default.credentials.createInsecure());
        const request = new src_1.ContactAliasRequest();
        const contactAlias = util_1.default.promisify(client.contactAlias.bind(client));
        {
            const response = yield contactAlias(request);
            const aliasWrapper = response.getAlias();
            let alias;
            if (aliasWrapper) {
                alias = aliasWrapper.getValue();
            }
            console.info('returned alias:', alias);
        }
        console.info('##############');
        {
            const aliasWrapper = new wrappers_pb_1.StringValue();
            aliasWrapper.setValue('test alias');
            request.setAlias(aliasWrapper);
            const response = yield contactAlias(request);
            const returnAliasWrapper = response.getAlias();
            if (returnAliasWrapper) {
                console.info('returned alias:', returnAliasWrapper);
                throw new Error('should not has alas return');
            }
            console.info('ok');
        }
        // testStream(client)
        return 0;
    });
}
function testStream(client) {
    // event(request: wechaty_puppet_event_pb.EventRequest, options?: Partial<grpc.CallOptions>): grpc.ClientReadableStream<wechaty_puppet_event_pb.EventRequest>;
    const eventStream = client.event(new src_1.EventRequest());
    eventStream
        .on('data', (chunk) => {
        // console.info('EventType:', EventType)
        // console.info('type:', chunk.getType(), EventType[chunk.getType()], EventType[23])
        console.info('payload:', chunk.getPayload());
        // console.info('eventStream.on(data):', chunk)
    })
        .on('end', () => {
        console.info('eventStream.on(end)');
    });
}
exports.testStream = testStream;
main()
    // .then(process.exit)
    .catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=client.js.map