/// <reference types="node" />
import http from 'http';
import { FileBoxType, FileBoxJsonObject, Metadata, Pipeable } from './file-box.type';
export declare class FileBox implements Pipeable {
    /**
     *
     * Static Properties
     *
     */
    /**
     * Alias for `FileBox.fromUrl()`
     *
     * @alias fromUrl()
     */
    static fromUrl(url: string, name?: string, headers?: http.OutgoingHttpHeaders): FileBox;
    /**
     * Alias for `FileBox.fromFile()`
     *
     * @alias fromFile
     */
    static fromFile(path: string, name?: string): FileBox;
    static fromStream(stream: NodeJS.ReadableStream, name: string): FileBox;
    static fromBuffer(buffer: Buffer, name: string): FileBox;
    /**
     * @param base64
     * @param name the file name of the base64 data
     */
    static fromBase64(base64: string, name: string): FileBox;
    /**
     * dataURL: `data:image/png;base64,${base64Text}`,
     */
    static fromDataURL(dataUrl: string, name: string): FileBox;
    /**
     *
     * @param qrCode the value of the QR Code. For example: `https://github.com`
     */
    static fromQRCode(qrCode: string): FileBox;
    /**
     *
     * @static
     * @param {(FileBoxJsonObject | string)} obj
     * @returns {FileBox}
     */
    static fromJSON(obj: FileBoxJsonObject | string): FileBox;
    static version(): string;
    /**
     *
     * Instance Properties
     *
     */
    boxType: FileBoxType;
    mimeType?: string;
    name: string;
    private _metadata?;
    get metadata(): Metadata;
    set metadata(data: Metadata);
    /**
     * Lazy load data:
     *  Do not read file to Buffer until there's a consumer.
     */
    private readonly base64?;
    private readonly remoteUrl?;
    private readonly qrCode?;
    private readonly buffer?;
    private readonly localPath?;
    private readonly stream?;
    private readonly headers?;
    private constructor();
    version(): string;
    type(): FileBoxType;
    ready(): Promise<void>;
    /**
     * @todo use http.get/gets instead of Request
     */
    protected syncRemoteName(): Promise<void>;
    /**
     *
     * toXXX methods
     *
     */
    toString(): string;
    toJSON(): FileBoxJsonObject;
    toStream(): Promise<NodeJS.ReadableStream>;
    /**
     * https://stackoverflow.com/a/16044400/1123955
     */
    private transformBufferToStream;
    private transformBase64ToStream;
    private transformFileToStream;
    private transformUrlToStream;
    private transformQRCodeToStream;
    /**
     * save file
     *
     * @param filePath save file
     */
    toFile(filePath?: string, overwrite?: boolean): Promise<void>;
    toBase64(): Promise<string>;
    /**
     * dataUrl: `data:image/png;base64,${base64Text}',
     */
    toDataURL(): Promise<string>;
    toBuffer(): Promise<Buffer>;
    toQRCode(): Promise<string>;
    /**
     *
     * toXXX methods END
     *
     */
    pipe<T extends NodeJS.WritableStream>(destination: T): T;
}
export default FileBox;
//# sourceMappingURL=file-box.d.ts.map