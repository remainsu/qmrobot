"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
// The npm package of my best choice for QR code decoding on Angular SPA
// https://dev.to/j_sakamoto/the-npm-package-of-my-best-choice-for-qr-code-decoding-on-angular-spa-4747?returning-user=true
const jimp_1 = __importDefault(require("jimp"));
const jsqr_1 = __importDefault(require("jsqr"));
/**
 * https://www.npmjs.com/package/qrcode
 *  Huan(202002): This module is encode only.
 */
const qrcode_1 = require("qrcode");
function bufferToQrValue(buf) {
    return __awaiter(this, void 0, void 0, function* () {
        const image = yield jimp_1.default.read(buf);
        const qrCodeImageArray = new Uint8ClampedArray(image.bitmap.data.buffer);
        const qrCodeResult = jsqr_1.default(qrCodeImageArray, image.bitmap.width, image.bitmap.height);
        if (qrCodeResult) {
            return qrCodeResult.data;
        }
        else {
            throw new Error('bufferToQrcode(buf) fail!');
        }
    });
}
exports.bufferToQrValue = bufferToQrValue;
function qrValueToStream(value) {
    return __awaiter(this, void 0, void 0, function* () {
        const stream = new stream_1.PassThrough();
        yield qrcode_1.toFileStream(stream, value); // only support .png for now
        return stream;
    });
}
exports.qrValueToStream = qrValueToStream;
//# sourceMappingURL=qrcode.js.map