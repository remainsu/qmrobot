var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* rx-queue version 0.8.5 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :
        typeof define === 'function' && define.amd ? define(['exports', 'rxjs', 'rxjs/operators'], factory) :
            (global = global || self, factory(global.window = {}, global.rxjs, global.operators));
}(this, function (exports, rxjs, operators) {
    'use strict';
    /**
     * This file was auto generated from scripts/generate-version.sh
     */
    var VERSION = '0.8.5';
    // default set to 500 milliseconds
    var DEFAULT_PERIOD_TIME = 500;
    // https://codepen.io/maindg/pen/xRwGvL
    var RxQueue = /** @class */ (function (_super) {
        __extends(RxQueue, _super);
        function RxQueue(period) {
            if (period === void 0) { period = DEFAULT_PERIOD_TIME; }
            var _this = _super.call(this) || this;
            _this.period = period;
            _this.itemList = [];
            return _this;
        }
        RxQueue.prototype.next = function (item) {
            if (this.observers.length > 0) {
                _super.prototype.next.call(this, item);
            }
            else {
                this.itemList.push(item);
            }
        };
        RxQueue.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var subscription; // TypeScript strict require strong typing differenciation
            if (typeof nextOrObserver === 'function') {
                subscription = _super.prototype.subscribe.call(this, nextOrObserver, error, complete);
            }
            else {
                subscription = _super.prototype.subscribe.call(this, nextOrObserver);
            }
            this.itemList.forEach(function (item) { return _this.next(item); });
            this.itemList = [];
            return subscription;
        };
        RxQueue.prototype.version = function () {
            return VERSION;
        };
        return RxQueue;
    }(rxjs.Subject));
    /**
     * DelayQueue passes all the items and add delays between items.
     * T: item type
     */
    var DelayQueue = /** @class */ (function (_super) {
        __extends(DelayQueue, _super);
        /**
         *
         * @param period milliseconds
         */
        function DelayQueue(period) {
            var _this = _super.call(this, period) || this;
            _this.subject = new rxjs.Subject();
            _this.subscription = _this.subject.pipe(operators.concatMap(function (args) { return rxjs.concat(rxjs.of(args), // emit first item right away
            rxjs.EMPTY.pipe(operators.delay(_this.period))); })).subscribe(function (item) { return _super.prototype.next.call(_this, item); });
            return _this;
        }
        DelayQueue.prototype.next = function (item) {
            this.subject.next(item);
        };
        DelayQueue.prototype.unsubscribe = function () {
            this.subscription.unsubscribe();
            _super.prototype.unsubscribe.call(this);
        };
        return DelayQueue;
    }(RxQueue));
    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * DelayQueueExecutor calls functions one by one with a delay time period between calls.
     */
    var DelayQueueExecutor = /** @class */ (function (_super) {
        __extends(DelayQueueExecutor, _super);
        /**
         *
         * @param period milliseconds
         */
        function DelayQueueExecutor(period) {
            var _this = _super.call(this, period) || this;
            _this.delayQueueSubscription = _this.subscribe(function (unit) {
                try {
                    var ret = unit.fn();
                    return unit.resolve(ret);
                }
                catch (e) {
                    return unit.reject(e);
                }
            });
            return _this;
        }
        DelayQueueExecutor.prototype.execute = function (fn, name) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var unit = {
                                fn: fn,
                                name: name || fn.name,
                                reject: reject,
                                resolve: resolve,
                            };
                            _this.next(unit);
                        })];
                });
            });
        };
        DelayQueueExecutor.prototype.unsubscribe = function () {
            this.delayQueueSubscription.unsubscribe();
            _super.prototype.unsubscribe.call(this);
        };
        return DelayQueueExecutor;
    }(DelayQueue));
    /**
     * DebounceQueue drops a item if there's another one comes in a period of time.
     *
     * T: item type
     */
    var DebounceQueue = /** @class */ (function (_super) {
        __extends(DebounceQueue, _super);
        /**
         *
         * @param period milliseconds
         */
        function DebounceQueue(period) {
            var _this = _super.call(this, period) || this;
            _this.subject = new rxjs.Subject();
            _this.subscription = _this.subject.pipe(operators.debounce(function () { return rxjs.interval(_this.period); }))
                .subscribe(function (item) { return _super.prototype.next.call(_this, item); });
            return _this;
        }
        DebounceQueue.prototype.next = function (item) {
            this.subject.next(item);
        };
        DebounceQueue.prototype.unsubscribe = function () {
            this.subscription.unsubscribe();
            _super.prototype.unsubscribe.call(this);
        };
        return DebounceQueue;
    }(RxQueue));
    /**
     * ThrottleQueue
     *
     * passes one item and then drop all the following items in a period of time.
     *
     * T: item type
     */
    var ThrottleQueue = /** @class */ (function (_super) {
        __extends(ThrottleQueue, _super);
        /**
         *
         * @param period milliseconds
         */
        function ThrottleQueue(period) {
            var _this = _super.call(this, period) || this;
            _this.subject = new rxjs.Subject();
            _this.subscription = _this.subject.pipe(operators.throttle(function () { return rxjs.interval(_this.period); })).subscribe(function (item) { return _super.prototype.next.call(_this, item); });
            return _this;
        }
        ThrottleQueue.prototype.next = function (item) {
            this.subject.next(item);
        };
        ThrottleQueue.prototype.unsubscribe = function () {
            this.subscription.unsubscribe();
            _super.prototype.unsubscribe.call(this);
        };
        return ThrottleQueue;
    }(RxQueue));
    exports.DebounceQueue = DebounceQueue;
    exports.DelayQueue = DelayQueue;
    exports.DelayQueueExector = DelayQueueExecutor;
    exports.DelayQueueExecutor = DelayQueueExecutor;
    exports.RxQueue = RxQueue;
    exports.ThrottleQueue = ThrottleQueue;
    exports.VERSION = VERSION;
    Object.defineProperty(exports, '__esModule', { value: true });
}));
/* https://github.com/huan */
//# sourceMappingURL=rx-queue.es6.umd.js.map
