#!/usr/bin/env ts-node
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// tslint:disable:no-shadowed-variable
import test from 'blue-tape';
import sinon from 'sinon';
import RxQueue from './rx-queue';
test('RxQueue subscribe & next', (t) => __awaiter(this, void 0, void 0, function* () {
    const EXPECTED_ITEM = { test: 'testing123' };
    const spy = sinon.spy();
    const q = new RxQueue();
    q.subscribe(spy);
    q.next(EXPECTED_ITEM);
    t.ok(spy.calledOnce, 'should received 1 call');
    t.deepEqual(spy.firstCall.args[0], EXPECTED_ITEM, 'should received EXPECTED_ITEM');
}));
test('RxQueue version()', (t) => __awaiter(this, void 0, void 0, function* () {
    const q = new RxQueue();
    t.ok(/^\d+\.\d+\.\d+$/.test(q.version()), 'get version');
}));
//# sourceMappingURL=rx-queue.spec.js.map