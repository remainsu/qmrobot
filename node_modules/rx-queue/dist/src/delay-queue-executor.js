var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import DelayQueue from './delay-queue';
/**
 * DelayQueueExecutor calls functions one by one with a delay time period between calls.
 */
export class DelayQueueExecutor extends DelayQueue {
    /**
     *
     * @param period milliseconds
     */
    constructor(period) {
        super(period);
        this.delayQueueSubscription = this.subscribe(unit => {
            try {
                const ret = unit.fn();
                return unit.resolve(ret);
            }
            catch (e) {
                return unit.reject(e);
            }
        });
    }
    execute(fn, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const unit = {
                    fn,
                    name: name || fn.name,
                    reject,
                    resolve,
                };
                this.next(unit);
            });
        });
    }
    unsubscribe() {
        this.delayQueueSubscription.unsubscribe();
        super.unsubscribe();
    }
}
export default DelayQueueExecutor;
//# sourceMappingURL=delay-queue-executor.js.map