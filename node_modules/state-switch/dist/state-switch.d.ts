/// <reference types="node" />
/**
 *
 * StateSwitch for easy managing the states with async programming
 *
 * Class StateSwitch
 * Licenst: Apache-2.0
 * https://github.com/huan/state-switch
 *
 * Helper Class for Manage State Change
 */
import { EventEmitter } from 'events';
/**
 * Using Three Valued Logic for ON/OFF State
 *  https://github.com/huan/state-switch/issues/1
 *
 * Three-valued Logic (3VL): `true`, `false`, and
 *  'pending': it's in process, not stable.
 */
declare type Pending = 'pending';
interface StateSwitchOptions {
    log?: any;
}
export declare class StateSwitch extends EventEmitter {
    readonly name: string;
    readonly options: StateSwitchOptions;
    private log;
    private onPromise;
    private offPromise;
    private onResolver;
    private offResolver;
    private _onoff;
    private _pending;
    /**
     * does the state is not stable(in process)?
     */
    get pending(): boolean;
    constructor(name?: string, options?: StateSwitchOptions);
    version(): string;
    setLog(logInstance?: any): void;
    /**
     * Get the current ON state (3VL).
     */
    on(): boolean | Pending;
    /**
     * Turn on the current state.
     * @param state
     *  `Pending` means we entered the turn on async process
     *  `true` means we have finished the turn on async process.
     */
    on(state: true | Pending): void;
    on(state: never): never;
    /**
     * Get the current OFF state (3VL).
     */
    off(): boolean | Pending;
    /**
     * Turn off the current state.
     * @param state
     *  `Pending` means we entered the turn off async process
     *  `true` means we have finished the turn off async process.
     */
    off(state: true | Pending): void;
    off(state: never): never;
    ready(state?: 'on' | 'off', noCross?: boolean): Promise<void>;
    /**
     * To make RxJS fromEvent happy: type inferencing
     *  https://github.com/ReactiveX/rxjs/blob/49304ffef8d7a0663c57fe8e673359a602e9d3e1/src/internal/observable/fromEvent.ts#L27-L30
     */
    addEventListener(type: 'on' | 'off', listener: ((evt: true | 'pending') => void) | null, options?: boolean | AddEventListenerOptions): void;
    removeEventListener(type: string, listener?: ((evt: true | 'pending') => void) | null, options?: EventListenerOptions | boolean): void;
}
export {};
